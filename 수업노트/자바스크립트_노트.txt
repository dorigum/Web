
JavaScript
- 정식 명칭은 ECMAScript
- 넷스케이프 JavaScript 라고 명명 했는데 이후 여러 변종 들이 생기면 넷스케이프 사가 ECMA라는 기관에 표준 제작을 일임
- ECMA가 자바스크립트 표준을 맡으면 자바상표권 분쟁 때문에 ECMAScript라는 명칭 사용

ECMAScript 
-  ECMA 기술 규격에 따라 정의하고 있는 표준화된 스크립트 프로그래밍 언어

2015 ES6 가장 큰 변화 (새로 추가)
- let / const
- arrow function (화살표 함수)
- default parameter (디폴트 매개변수를 갖는 함수)
- class

forEach() 문  : ES5에 새로 도입

최신 버전으로 계속 만들고 있는 ES5 또는 ES6변환해서 변환된 코드 생산

자바스크립트 - 가장 많이 사용되어지는 언어 상위권
- 개발자가 가장 많이 배우고 싶은 언어 상위권

------------------------------------------------------------
자바스크립트 : 동적인 웹페이지 작성하기 위해 사용되는 언어
- 웹의 표준 프로그래밍 언어
- 거의 모든 웹 브라우저에서 자바스크립트를 지원
- 웹 브라우저 뿐 아니라 스마트폰용 애플리케션 개발 등 각종 분야에서 능력과 가치를 인정 받고 있음
- 초기에는 브라우저에 내장되어 제한된 기능만 지원하였으나 
- 현재는 Ajax라는 기술과 함께 영향력이 증가하고 있음

자바스크립트 기능
- HTML이 지원하지 못하는 다양한 기능 지원
--동적인 움직임 / 이벤트 처리 / 경고 메시지 출력
--Ajax를 이용하여 새로운 내용을 동적으로 로딩하거나 서버에 전송해서 동적인 페이지 생성
--애니메이션 기능 추가(페이드인/페이드아웃/크기, 위치 이동 등)
-- 웹 페이재의 폼의 입력값을 서버에 보내기 전에 내용 검증 (유효성 확인)
-- 브라우저 사용자의 특성(웹 페이지 탐색 움직임, 게시물 읽을 때 습관 등)에 대한 정보를 서버에 전송
-- 웹 분석, 사용자 동작 트래킹, 웹 서비스 개인화 등에 사용 (타겟 마케팅)

스크립트 실행
- 스크립트 언어이기 때문에 컴파일 하지 않고
- 인터프리터를 통해 웹 브라우저에서 한 줄씩 바로 실행
- 위에서 아래로

인터프리팅 언어 (스크립트 언어)
- 독자적으로 실행되지 않고 다른 프로그램에 내장되어 사용

자바스크립트 용도
- 이벤트에 반응하는 동작 구현
- HTML 요소의 동적 변환
- 시용자가 입력한 값 검증
- 게임/애니메이션 구현
- Ajax 기술을 사용하여 서버와 데이터를 비동기적으로 교환

비동기식 처리
- 서버 측에 데이터를 요청한 후 데이터 수신이 완료될 때까지 기다리지 않고 다른 작업 진행
- 페이지 전체 내용을 다 다시 불러오지 않고, 일부 데이터만 업데이트 가능

-----------------------------------------------------------------
자바스크립의 기본 구조

<script type="text/javascript">
  자바스크립트
  </script>
  
  
  자바스크립트 사용법 3가지
  (1) Internal 방식
  (2) External 방식
  (3) Inline 방식


 (1) Internal 방식
 - HTML  문서에 삽입 
 - 일반적으로 <HEAD>부분에 삽입
 
  (2) External 방식
  - 별도의 자바스크립트 파일(.js)로 작서하여 HTML 문서에서 소스 지정  
  
 (3) Inline 방식
- 자바스크립트의 양이 적을 때
- HTML 태그의 이벤트 핸들러 속성을 이용하여 함수 호출해서 사용
<body onLoad="start()">

------------------------------------------------------------------------
데이터 출력
(1) console.log(내용);
(2) window.alert(내용);
(3) document.write(내용);
(4) DOM (문서 객체 모델) 사용

데이터 입력 방법
- confirm() 함수 사용해서 입력 받기 (확인/취소 버튼) (true/false 반환)
- prompt() 함수 사용해서 입력 받기 (키보드 입력 받은 값을 반환)
- getElementsByTagName() : 태그 이름 사용해서 값을 가져오기
- <imput> 태그와 value 속성 사용 값을 입력 받기
- DOM 사용 입력 받음

--------------------------------------------------------------------------
주석문
 - 한 줄 주석 : //
 - 여러 줄 주석 : /*  */
 
--------------------------------------------------------------------------
변수 : 프로그램 실행 중에 값을 저장하기 위한 메모리 내의 임시 기억장소

자바스크립트 식별자(변수명, 함수명 등) 명명 규칙
- 시작은 받느시 영문자, _ 문자 사용 가능
- 숫자 사용할 수 없음
- 대소문자 구별
- 키워드 사용할 수 없음
- 특수문자 공백은 사용할 수 없음
- 한글 사용 가능 (영문 사용 권장)
- 의미 있는 단어 사용 (예: name, address, age,... )

변수 선언
- var 
- let
- const
-ES6 이후 보완하기 위해 추가된 변수 선언 방식 : let과 const 사용

-- 변수르 필요한 곳에서 사용하면 자동으로 생성되기 때문에 반드시 선언하지 않아도 됨
-- 변수의 데이터 타입은 실행 시 결정 (동적 타이핑)
-- 명시적으로 선언할 경웨 예약어 var, let, const 사용 (명시적 선언 권장)

동적 타이핑
- 변수의 자료형을 실행 시 결정
- 자료형 없이 변수에 값 저장
- var name = "홍길동";ㅣ
- num = 100;

정적 타이핑
- 변수의 자료형을 컴파일 시에 결정
- C/C++, Java 등
- 선언한 변수의 자료형에 따라 값 저장

변수 유형
- 전역 변수
-- 전역변수 범위(<script>태그 바로 아래)에 명시적 선언되거
--명시적으로 선언하지 않고 사용하는 변수
- 지역 변수
--함수 내에서 var를 붙여서 선언된 변수만 : 함수 내에서만 사용 가능
--함수 내에서 var 없이 사용된 변수는 전역 변수
--블록 내에서 let을 붙여서 선언된 변수 : 블록 내에서는 사용 가능

var와 let / const와 차이점
(1) var 문제점
 -- 동일한 이름으로 여러 변수를 선언해도 오류 없이 다른 값을 출력
 - let : 동일한 이름의 변수를 중복 선언 불가
 
 (2) 호이스팅(Hoisting)
 - var 선언문 또는 function 선언문의 scope을 맨 위로 이동한 특성 
 - 선언은 아래에서 했지만, 그 위에서 사용 가능
 - let으로 선언된 변수는 이전에 참조하면 에러 발생
 
(3) 블록 내 선언
- var는 블록 내에서 선언해도 함수 내가 아니면 전역 변수 (함수 내에서 var 붙여서 선언한 경우만 지역변수)
- let은 선언된 블록 내에서만 사용 가능한 지역 변수 

let과 const 
- const :재 할당 불가 (상수처럼 값 변경 불가)
- 값을 변경할 것이 아니라면 변수처럼 사용 가능
 - let x = 100;
 - const y = 100;
 
 - x = 200; //가능
 - y = 200; // 값 변경 불가 (재할당 불가)

--------------------------------------------------------------------------
연산자 : 자바와 동일

데이터 타입 
- 숫자 : 정수형, 실수형
- 문자 : 'a'
- 문자열 : "string", '작은 따옴표도 사용 가능'
- NaN : Not a Number (숫자가 아닌데 숫자로 사용할 경우)
- 논리값 : true, false
- undefined : 값의 유형을 알 수 없는 경우
- null : 참조 객체 없는 경우 (값이 없을 떄)

데이터 형변환
- parseInt() : 정수값으로 형변환
- parseFloat() : 실수값으로 형변환
- String() / toString() : 문자열로 형변환


제어문 : 프로그램의 흐름을 제어
- 조건 선택 : if/ if~else / if~else if ~/ switch
- 반복문 : for / while / do~while
- 기타 제어문 : continue / break

switch 문
- 수식으로은 값의 결과가 정수, 실수, 문자열, 객체 값
- case 다음에는 콜론(:) 사용
- break 문이 없는 경우 해당 case에서 실행이 멈추지 않고 다음 case까지 수행됨

for 문 형식
for(초기식; 조건식; 증감식) {
	조건식 참일 경우 반복 수행되는 문장
}

for문으로 list 출력
list 출력 태그 : <ol> <ul> <li>
<ul>    // for문 시작 전에
   <li></li>   // for문 안에서 반복
   <li></li>   // for문 안에서 반복
   <li></li>   // for문 안에서 반복
</ul>  // for문 종료 후에

HTML : <ul type="square">
" 의 특수 문자 : \" 
document.write("<ul type='square'>");
document.write("<ul type=\"square\">"); // \" 특수문자 사용할 경우


for문으로 table 출력 : <table><tr><td>
<table border="1">    // for문 시작 전에
   <tr><td>i값</td><td>sum값</td></tr>   // for문 안에서 반복
   <tr><td>i값</td><td>sum값</td></tr>   // for문 안에서 반복
   <tr><td>i값</td><td>sum값</td></tr>   // for문 안에서 반복
</table>   // for문 종료 후

for in 문 : 배열이나 객체를 쉽게 탐색 가능
형식
for (var 변수명 in 배열) {
	저장변수 = 배열[변수명]
}

예: 
for (var i in arr) {
	num = arr[i]
}

forEach() 문  : ES5에 새로 도입
형식 : 배열.forEach(function(배열의 항목, 배열의 인덱스, 배열 그 자체) { });


중첩 for 문 
for(초기식; 조건식; 증감식) {
	for(초기식; 조건식; 증감식) {
	 
    }	 
}

while 문 
형식

초기값
while(조건) {
  조건이 참일 경우 반복 수행되는 문장
  증감식 // 반복문을 빠져 나올 수 있는 조건에 이를 수식
}

var 1 = 1;
while(i <= 5) {
	// 수행될 문장
	i++;
}

do ~ while 문
형식
do {
    조건이 참이면 반복 수행되는 문장
} while(조건);

먼저 do에 들어와서 문장을 한 번 수행하고
while(조건)에서 조건을 확인하고 반복 수행 결정
따라서 무조건 한 번은 수행

 배열 : 동일한 이름을 갖는 원소들의 연속적 저장 영역
 - 배열의 원소는 메모리 내에서 순서대로 저장
 - 각 배열의 원소는 인덱스([0]부터 시작)로 구별
-  자바스크립트의 배열 : 각 원소에 다른 유형의 데이터 저장 가능
- var student = new Array(3);
- 홍길동				4					90.5
student[0]   student[1]	student[2]
- 배열의 크기 (원소의 개수 ) : length
- 배열 전체에 값을 저장하거나 출력할 경우 for문 사용 (주의: 인덱스는 0부터)
for(var i=0; i<arr.length; i++){
}

배열 선언 형식
(1) var 변수 = new Array(); //크기가 정해지지 않은 배열 선언
(2) 변수 = new Array(5); // 크기 지정
(3) 변수 = new Array(값1, 값2, 값3, ...); // 선언과 동시에 초기화
(4) 변수 = [값1, 값2, 값3, ...]; //  선언과 동시에 초기화하는 다른 방법

배열 사용
- 배열 원소에 값 저장 : arr[2] = 100; //3번째 원소에 100 저장
- 배열 원소에 들어 있는 값 출력 : x = arr[0]; // 배열의 첫번째 원소의 값을 출력해서 변수 x에 저장
- 주의 : 배열의 전에 원소에 값을 저장하거 출력할 경우 반복문 사용 
	     -- 배열 크기가 정해져 있기 때문에 반복 횟수를 알 수 있는 for문 사용
	     -- 반복 시작은 반드시 0부터 시작 (배열 첨자가 [0]부터 시작하므로)

----------------------------------------------------------------------------------------------
함수
- 특정 기능을 수행하고 결과를 돌려주는 독립적인 코드 집합
- 독립적인 모듈 { }
- 함수/프로시저/모듈/메소드 : 기능
- (변수 : 데이터 / 기능,작업 : 함수(메소드))

자바스크립트의 함수
- 자동 호출되는 함수
- 선언적 함수 (일반 함수)
- 익명 함수
- 콜백 함수
- 화살표 함수 (ES6에 추가)
- 디폴트 매개변수를 갖는 함수 (ES6에 추가)

함수의 특징
- 함수를 사용하기 위해서는 반드시 호출해야 한다
- 함수 선언 형식
function 함수명(){
  // 여기가 함수의 body : 함수가 수행하는 문장
}
- 함수 사용
--함수를 사용하기 위해서는 반드시 호출해야 한다
--함수 호출 : 함수명();

(1) 자동 호출되는 함수 :  (function() { })();
(2) 선언적 함수 (함수)
-- 반환값이 함수 : return
function 함수명(){
  return 값;
}
-- 매개변수가 있는 함수
function 함수명 (매개변수){
	
}
함수 호출 시 매개 전달 : sum(20, 20)

함수 호이스팅 적용 
- 호이스팅 (함수 선언 보다 함수 호출이 위에 위치해도 실행되는 기능)

// 함수 선언보다 먼저 함수 호출
input(); // 오류 없음 : 함수 호이스팅

// 여기에 함수 선언 (정의)
function input(){

}

(3) 익명 함수 : 함수 이름 없고 변수에 대입해서 사용하는 함수
var 변수명 = function() {

}
 - 호출은 함수 형식으로 호출 : 변수명();
 - var 생략 가능
 - 호이스팅 안 됨
 - 다른 변수에 대입 가능
 -- var a =function() { }
    var b = a; 
    
    호출 : a():

(4) 콜백함수(Callback Function)
- 함수의 매개변수로 전달해서 사용하는 함수
- 콜백 함수는 주로 이름이 없는 익명 함수 사용

- 콜백함수를 사용하는 이유 
-- 주도 비동기 작업 때문 사용
-- 예로 DB 작업, 데이터 입출력 작업 등 시간이 오래 걸리는 작업을 순찾거으로 진행해야 하는데
- - 비동기도 구현이 되어 있는 경우
-- 각각의 기능의 어떤 작업 늦게 끝나고 어떤 작업은 동시에 끝날 수 있습니다
-- 다음 처리할 때 순서에 문제가 생길 수가 있음
-- 콜백함수 패턴을 사용하면
- 작업1을 시키고 작업이 완료되었을 때 알림을 받을 콜백함수를 지정합니다
-- 작업1이 완료되면 콜백함수 호출이 되고 
-- 해당 콜백함수 안에서 다른 작업을 시작할 수가 있습니다.
--비동기 작업을 순차적으로 실행이 가능하게 되기 때문에 콜백함수 사용 

-- 비동기 호출이 자주 일어나는 프로그램인 경우 
-- 함수의 매개변수로 넘겨지는 콜백함수가 반복되어 코드 깊어져서 힘들어질 수가 있습니다.
-- 콜백지옥

(5) 화살표 함수 : ES6에 추가
- 함수 표현식보다 단순하고 간결한 문법으로 함수를 만들 수 있는 방법
- function 키워드 대신 화살표(=>) 사용해서 보다 간략하게 함수를 선언하는 방법
- 형식 : var 변수명 = 매개변수 => 수행 문장
- () => { ... } : 매개변수가 없는 경우
- x => { ... } : 매개변수가 1개인 경우 괄호 생략
- (x, y) => { ... } : 매개변수가 여러 개인 경우 괄호 사용
- x => { return ... }
- x => x + y;

(6) 디폴트 매개변수를 갖는 함수 (ES6에서 추가)
- 함수 매개변수에 값이 설정되어 있는 경우
- function(x, y=10){ } : y값을 전달하지 않으면 디폴트로 y값이 10으로 설정

--------------------------------------------------------------------------------------------
자바스크립트 객체
(1) 내장객체
(2) 브라우저 객체
(3) 문서 객체 (DOM)
(4) 사용자 정의 객체


(1)자바스크립트의 내장객체 (Built in Object)
- 미리 정의되어 있는 객체
- 선언 과정을 통해 객체 변수를 정의해서 사용
- 대표적인 내장 객체
-- Date : 날짜와 시간을 처리하기 위한 객체
-- Array : 배열을 만들기 위한 객체
-- String : 문자열을 다루기 위한 객체
-- Math : 수학 계산을 위한 객체
-- Event : 발생하는 이벤트 (버튼 클릭 이벤트 등)에 관한 정보를 제공하는 객체
-- Screen : 화면의 해상도, 색상, 크기에 관한 정보를 제공하는 객체

- 객체 생성 및 사용 예
- 생성 
-- var today = new Date(); // Date 객체 생성
-- var arr = new Array(3); // Array 객체 생성
- 사용 : 각 객체의 메소드 사용
-- today.getMonth(); // 객체.메소드()
-- arr.sort();

- Date 객체 : 날짜 출력
- Array 객체 : 메소드 사용
- Math 객체 : random() 사용해서 이미지 랜덤으로 출력
- String 객체 : 문자열 객체
-- var name = new String("홍길동");
-- name.fontsize(4);
-- var name = "홍길동"; // 상수 형태의 문자열
-- name.fontsize(5); // 객체로 자동 변환 (일시적)
-- String 객체 메소드 
-charAt() / indexOf() / substring() / slice() / toUpperCase() / toLowerCase()
-concat() / split()

-- charAt(인덱스) : 인덱스로 지정된 위치의 문자 반환  (인덱스 0부터 시작)
-- substring(start, end) : 문자열 일부 추출 (인덱스 start ~end-1까지 문자열 추출) 
-- split("구분자") : 구분자로 문자열 분리
-- 문자열이 구분자 기준으로 분리되어 배열에 순서대로 저장

---------------------------------------------------------------------------------

(2) 브라우저 객체 모델
- 자바스크립트에서는 웹 페이지를 구성하는 HTML 태그의 모든 요소와 
- 웹 브라우저를 구성하는 요소들을 객체로 정의해서 제공
- 객체들은 계층 구조로 분류
- 최상위 window
- 그 아래에 frame document location history
- 그 아래에 layer image form ,...................
- form 아래에 text, radio, password, radio, button...
- window 객체 : 윈도 창
- document 객체 : 문서
- history 객체 : 웹 브라우저 기록 정보
- location 객체 : 주소 정소

- window 객체 : 윈도 창
-- 창에 대한 전반적인 상황을 제어하는 최상위 객체
-- window.document.pic.src = "image.jpg"
-- window 생략
-- window 객체의 주요 메소드 : open() / close() / setTimeout() / clearTimeout()
   setInterval() / clearInterval() 

- window 객체의 open() 메소드 사용해서 새로운 창 열기
- 새로운 창을 만들어 화면에 출력하는 기능
- window.open('url', '창이름, '창 속성')
url : 웹페이지주소 또는 파일명
창이름 : 새로 만들어지는 창에 붙는 이름
창 속성 : 창의 모양이나 특징 (width, height, status, scrollbar, resizable)

타이머 설정과 해제
(1)setTimeout('호출함수', 지연시간)
- 일정 시간이 지난 후에 호출함수를 1번만 실행
- setTimeout('winclose()', 1000); //1초 후에 winclose() 함수 호출
- clearTimeout(타이머ID) : 시간 설정한 것을 해제
- 타이머ID = setTimeout('winclose()', 1000);

(2) setInterval('호출함수', 지연시간);
- 일정 시간 간격 안에 반복 실행
- setInterval('showTime()', 1000);
- clearInerval(타이머ID)
- 타이머ID = setInterval('showTime()', 1000);

location 객체
- 현재 브라우저의 주소창에 표시된 주소 값에 관련된 내용을 다루는 객첵
- href = URL : 지정된 URL로 페이지 이동
- assign(URL) : 지정된 URL로 페이지 이동
- replace(URL) : 지정된 URL로 페이지 이동. 이 경우에는 URL로 대체되어 history 기론이 남지 않음 
                         (back 버튼 적용 안 됨)
- reload() : 문서 내용 새로 고침

-------------------------------------------------------------------------------------
(3) 문서 객체 모델 (DOM)
- 객체지향 모델로서 구조화된 문서를 표현하는 형식
- HTML 문서에 접근하기 위한 표준 모델 (대부분의 브라우저에서 DOM을 구현하는 기준)
- 문서 내의 모든 요소를 정의하고 각 요소에 접근하는 방법을 제공
- Document Object Model
- document 객체의 하위 객체를 이용하여 문서 내에서 일어나는 다양한 기능 제어
- DOM 사용 시기 : HTML 문서가 로드되고 나서 파싱을 작업을 거쳐 DOM 트리 생성
- DOM 트리가 생성되고 DOM 문서가 로드될 때 사용
- 문서 내의 요소(태그) 제어 주요 메소드
- createElement() : 요소 노드 생성
- appendChild() : 객체에 노드 연결
- getElementById() : 태그의 id 속성으로 문서 객체를 반환 (id로 태그 찾기)
- getElementByName()
- getElementsByTagName()
- querySelector()
- querySelectorAll()

DOM 요소 조작 시 자바스크립 위치
- 문서 내에서 요소(객체)들이 생성되기 전에
- 자바스크립트를 선언하게 되면
- 요소를 선택할 수 없음
- 올바른 위치
(1) DOM 요소 다음에 자바스크립트 선언
(2) 윈도우 로드 완료 후 자바스크립트 실행

잘못된 위치
<html
<head>
자바스크립트 선언
</head>
<body>
DOM (HTML 태그)
</body>

올바른 위치
(1) 자바스크립트가 DOM 요소 다음에 위치
<html
<head>

</head>
<body>
DOM (HTML 태그)
자바스크립트 선언
</body>

(2) 윈도우 로드 완료 후 자바스크립트 실행

<html
<head>
윈도우 로드 완료 후
자바스크립트 선언
</head>
<body>
DOM (HTML 태그)
</body>


getElementsByTagName()
- 문서 내의 모든 요소를 배열 컬렉션으로 전달 받아서 참소할 수 있게 해주는 메소드
- 참조값들은 배열로 만들어져서 전달
- var tdArr = document.getElementsByTagName('td');
- 문서 내의 <t> 태그 수가 배열 크기
- for문 사용해서 요소 참조

---------------------------------------------------------------------------------
사용자 정의 객체 : 사용자가 직접 필요한 객체 생성
사용자 정의 객체 생성 방법
(1) new Object() 이용
(2) 리터럴 이용
(3) 생성자 함수 (function) 이용
(4) class 정의하고 객체 생성 (ES6에 추가)


(1) new Object() 이용
var obj = new Object(); // 객체 생성
// 멤버 변수 추가
객체.프로퍼티 = 값

// 멤버 메소드 추가
객체.메소드이름 = function(){
}

// 객체의 멤버 메소드 사용 (호출)
객체.메소드()


(2) 리터럴 이용 사용자 정의 객체 생성 : 코드가 더 간결하고 가독성 높음
var 객체 = {
	// 멤버 추가
	프로퍼티:값,
	프로퍼티: 값,
	
	//멤버 메소드
	메소드이름 : function(){
	};
}
객체.멤버메소드(); // 객체의 멤버 메소드 이용 (호출)

(3) 생성자 함수 (function) 이용
- 함수 선언과 같은 방식으로 function 키워드 사용하여 선언
- new 연산자 사용해서 객체 생성
- this.프로퍼티
- function 키워드 사용했으므로 함수 호이스팅 가능
- 선언 전에 호출해서 사용 가능
function 생성자함수명() {
	this.멤버변수;
	
	//메소드
	this.메소드 = function(){
	}
}

//객체 생성
var 객체 = new 생성자함수명():


(4) class 정의하고 객체 생성 (ES6에 추가)
- class 키워드 사용
- 생성자 / Getters / Setters 가능
- 호이스팅 불가 : 클래스 정의 이후에서만 객체 생성 가능(사용 가능)
class 클래스명 {
	//생성자
	constructor(){ }
	
	// Getter
	get 메소드명() {  return this.변수; }
	
	//Setter
	set 메소드명(값) {this.변수 = 값;}

}

// 객체 생성
var 객체 = new 클래스명(); // 생성자 호출
주의 : 메소드 호출 시 메소드명 다음에 소괄호 안 붙임
rect.area

----------------------------------------------------------------------------------------
자바스크립트 객체 JSON 변환
JSON (JavaScript Object Notation)
- 자바스크립트의 객체 표기법
- key와 value 값이 쌍으로 구성된 형태의 객체 표기법
- 클라이언트와 서버 사이에서 데이터 교환 목적으로 사용
- 웹 서버에서 수신하는 데이터는 문자열인데
- 문자열 데이터를 JSON 파싱 함수를 통해서 자바스크립트 객체로 변환 가능
- 최근의 웹 브라우저들은 전부 내장 객체로 JSON 변환 기능 지원

- 제이슨 데이터 형식 
- {key : value } 
- {"name":"홍길동"}

- JSON.stringify() : 자바스크립트 객체를 JSON 데이터로 변환
- JSON.parese() : JSON 데이터를 자바스크립트 객체로 변환

-----------------------------------------------------------------------------------------------
자바스크립트의 이벤트 처리 방식 3가지
(1) 인라인 이벤트 핸들러 사용
(2) 고전 방식의 이벤트
(3) DOM 이벤트 리스너 등록 : addEventListener()


(1) 인라인 이벤트 핸들러 사용
- HTML 태그의 이벤트 핸들러 사용
<img src="a.png" onMouseOver="show()">
- 태그 안에서 이벤트핸들러="함수호출"

(2) 고전 방식의 이벤트
객체.이벤트명 = function(){

}
btn.onclick = function(){
}

(3) DOM 이벤트 리스너 등록
- addEventListener(이벤트종류, 함수명)
- removeEventListener()


- 인라인 방식과 고전 방식의 경우
- 같은 객체에 대해 동일한 이벤트를 여러 번 사용 불가
- 마지막 이벤트 핸들러만 적용

------------------------------------------------------------------------------------

폼 유효성 확인
- form 객체 : document 객체의 하위 객체
- form 태그 내에 들어 있는 여러 입력 양식 객체 제어
- form 객체 하위 객체들
-- text, radio, select, password, checkbox,...

폼 객체 선택하는 방법
(1) 태그의 name 속성을 객체로 사용하는 방법
<form name="newForm">
  <input type="text" name="id">
- newForm.id.focus();
    
(2) DOM 방식을 사용하는 방법
<input type="text" name="id" id="id">
var id = document.getElementById('id');
id.focus();

(3) jQuery 사용 - 훨씬 간단


radio : 그룹에서 여러 개 중 1개만 선택 
- 그룹으로 묶어 하나의 이름으로 사용 
- radio 객체는 배열 형태로 사용
- checked 속서이 true이면 체크된 상태 (각 라디오 버튼을 확인)
- false이면 체크되지 않은 상태
- 배열 개수만큼 for문 사용
- if(폼.emailRcv[i].checked == true)

<input type="radio" name="emailRcv" value="yes">예
<input type="radio" name="emailRcv" value="No">아니오

checkbox : 여러 개 선택 가능
<input type="checkbox">
- checked 속서이 true면 체크된 상태
- false면 체크되지 않은 상태











