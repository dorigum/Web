 스타일 시트 (CSS) 
 - Cascading Style Sheets : 계단형 스타일 시트
 - 단계적으로 스타일 적용
 - 여러 스타일이 겹치면 맨 마지막 스타일 적용
 - HTML의 레이아웃 배치 등의 한계를 보완하기 위해 개발된 독립적인 언어
 - 일정 기능을 미리 지정하여 여러 부분에 동일하게 적용해서 사용 
 - 가능한 작업 : HTML 문서 내의 글꼴 종류, 크기, 색, 배경, 테두리, 레이아웃 배치, 여백 등 지정
 - 다양한 효과, 애니메이션 등 가능
 
 스타일 시트 장점
 - 자유롭게 웹 문서를 편집
 - 통일감 있는 문서 작성 : 한 번만 정의하고 여러 문서에 일관되게 적용 가능
 - 편리한 문서 관리
 	- 외부 스타일 시트 파일 사용할 경우 여러 웹 문서에 동일하게 적용가능
 	- 한 번만 수정해서 모든 웹 문서의 스타일 동시에 변경 가능
 	
 스타일 시트 적용 방법
 (1) 문서 내부에 정의 (Embedded Style)
 (2) 외부 문서로 작성해서 연결하여 사용 (Linked Style)
 (3) 태그에 직접 정의 (Inline Style)
 
 
(1) 문서 내부에 정의 (Embedded Style)
- <head> 태그 내에 삽입
- 현재 문서 전체에 특정 효과 주기 위해 사용
<head>
	<style type="text/css">
		선택자 { 속성:값; }
	</style>
</head>

(2) 외부 문서로 작성해서 연결하여 사용 (Linked Style)
<head>
	<link rel="stylesheet" type="text/css" href="외부 css 파일명">
</head>
 	
 	<link rel="stylesheet" type="text/css" href="myStyle.css">
 	
 (3) 태그에 직접 정의 (Inline Style)	
 <body style="color:blue;">
 	
 -------------------------------------------------------------------
 스타일 시트의 기본 형식
 - 선택자 (selector) : 스타일을 적용할 대상
 	- 태그, 아이디,  클래스, 속성
 - {속성:값;} : 적용하고자 하는 속성과 값 (크기, 색상, 글꼴  등)
 - 예 : 태그 선택자인 경우 : h1 {color:red; }
 
 선택자 유형
 (1) 태그 선택자
 (2) 클래스 선택자
 (3) 아이디 선택자
 (4) 속성 선택자
 (5) 상태 선택
 
 (1) 태그 선택자	 : 태그명 사용 
 - 요소(element) 선택자라고도 함
 - HTML 문서에 있는 같은 모든 태그에 동일하게 적용
 - 태그명 {속성:값;}
 
  (2) 클래스 선택자
  - 여러 개를 그룹화해서 동일하게 적용하기 위해 선택
  - 중복 적용
  - 사용자 정의 선택자
  - . 사용
  - 형식 
    -.클래스명 { 속성:값; }
    - 태그에 class="클래스명"이 지정되어 있어야 함
    - <태그명 class="className">  
 
 
  (3) 아이디 선택자 
  - id="xxx" 지정해서 이 아이디에 해당되는 태그를 선택
  - 아이디는 유일한 값 - 1개만 존재
  - 문서에 특정 부분에만 필요한 CSS를 적용할 때 사용
  - 식별 선택자라고도 함
  - 선택자 앞에 #붙임
  - 형식 
    - #id명 {속성:값; }
    - 태그에 id가 지정되어야 함 <태그명 id="id명">
    - <div id="bigBox">
    - #bigBox {   }
 
 (4) 속성 선택자 
 - 문서에 삽입된 HTML 태그(요소)의 지정된 속성 값에 따라 선택자 정의
 - 예: <a title="산업기사">산업기사</a>
 -태그명[속성="값"] : 값 일치할 경우 선택
 -태그명[속성^="값"] : 값으로 시작하는 경우를 선택
  -태그명[속성$="값"] : 값으로 끝는 경우를 선택
 
 (5) 상채 선택자
 - 선택자:checked : 체크된 input 태그 선택
 - 선택자:focus : 포커스를 받은 input 태그 선택
 - 선택자:enabled - 사용가능한 input 태그 선택
 
 - inline / block
 - display 속성 : 없으면 block 디폴트 (행으로 배치 / 여백 있음)
 - block : 행으로 배치, 옆으로 나란히 배치 안 됨, 여백 있음
 - inline : 옆으로 나란히 배치, 여백 없이 내용물만큼만 공간 차지
 - inline-block : 인라인과 블록 성격 모두 포함 (옆으로 배치되면서 여백 있음)
 
 - float 속성 : 해당 요소를 떠 있게 만드는 속성
 - 즉, 기본 레이아웃을 흐름에서 벗어나 왼쪽이나 오른쪽으로 이동함
 - left : 왼쪽에 배치
 - right : 오른쪽에 배치
 
 - 목록 관련 속성
 - type 있고 / 없고 : list-style-type
 - list-style-type:squre /list-style-type:none
 - 블릿 기호 없애고 가로로 배치 :  ul { display:inline; } 봄 여름 가을 겨울
 
 위치 관련 속성	: position 속성
 - static : 다른 요소와 겹치지 않게 배치, 위치를 지정하지 않으면 static 적용. 디폴트
 - relative : static의 원래 위치를 기준으로 계산
 - absolute : 가장 가까운 상위 요소를 기준으로 배치.(부모 박스 기준)
 					상위 요소가 static인 경우에는 브라우저 화면 기준 (부모가 위치 지정 안되어 있는 경우 브라우저 기준)
 - fixed : 브라우저 화면을 기준으로 고정 위치에 배치
 
 - parent 안 요소들을 absolute으로 배치하려면
 - parent의 position을 relative로 설정해야 한다
 - 부모 박스를 기준으로 안에 있는 자식 박스들의 위치를 absolute으로 하려면
 - 부모는 relative로 설정해라
 	
 -겹침 (레이어) 표현 속성
 - z-index 속성
 -- 요소들이 겹칠 때 순서 지정
 -- 나중에 배치하는 것이 위에 놓음
 --z-index 값이 클수록 위에 놓임
 
 ------------------------------------------------------------------
 - 자식 선택자 : > 부호 사용
 - 선택자 > 자식 선택자
 - 선택자A > 선택자B
 - #header > h1
 
 - 자손 (후손) 선택자 : 띄어 쓰기 (스페이스)
 - 선택자 자손선택자
 - 선택자A 선택자B
 - #header h1
 - #pageNav ul li a:hover
 
 - first-child 선택자
 - .wrap div:first-child     첫 번째
 - .wrap div:first-child + div   두 번째
 - .wrap div:first-child + div + div  세번 번째
 
 - nth-child(숫자)
 - .wrap div:nth-child(1)
- .wrap div:nth-child(2)
- .wrap div:nth-child(3)
 
 -짝수 번째 선택 : nth-child(2n)
 
 - 동적(반응) 선택자 
 - 선택자:active - 마우스를 클릭한 태그 선택
 - 선택자:hover - 마우스를 올린 태그
 
 예:
 a:acive - 마우스로 클릭했을 때
 a:hover - 마우스를 올렸을 때
 a:link - 방문하지 않은 링크 섡택 스타일
 a:visited - 방문된 링크 선택
 
 - overflow 속성
 - 자식 요소가 부모 요소의 범위를 벗어났을 때 
 - 어떻게 처리할 것인지 지정
 - hidden : 부모 영역을 벗어나는 부분은 보이지 않게 처리
 - scroll : 스크롤바 표시 (가로 / 세로)
 - auto : 자동으로 필요한 부분에만 스크롤바 표시
 
 - 투명도 (불투명도)
 - opacity 속성
 -- 0 ~1 사이의 값 지정
 -- 0 : 투명 (안 보임)
 -- 1 : 불투명 (보임)
 -- 0.5 : 반투명
 
 - 가시성 (보임 / 안 보임)
 --visibility 속성
 -- hidden : 숨김 (안 보임)
 -- visibel : 보임
 
 ----------------------------------------------------------------
미디어 쿼리 (Media Query)
 - 화면의 크기와 환경 감지 및 웹사이트를 변경하는 기술
 - 컴퓨터 기기의 환경 또는 종류를 감지해야 그 기기에 맞게 웹사이트의 구조를 바꿀 수 있기 때문에
 - 반응형 웹을 제작할 때 반드시 필요한 기술
 
 query - 질의 (질문)
 - 미디어에게 질문하고 감지하여 웹사이트를 변경하는 기술
 - 어떤 종류의 미디어 인가?
 - 미디어 화면의 크기는 어느 정도 되나?
 
 미디어 쿼리 기본 문법
 -@media [미디어 유형] [and] (조건문) { 실행문 }
 - (조건문) : 조건문이 사실일 경웨 뒤에 오는 실행문을 해석하고 실행
 - (min-width:320px)
 -{ 실행문 } : 일반적으로 CSS 코드 작성
 
 
 @media (min-width:320px) {
 	body {background:red; }
 }
 
  @media (min-width:768px) {
 	body {background:green; }
 }
 
  @media (min-width:960px) {
 	body {background:yellow; }
 }
 
 주의! 
 - min 접두사를 사용할 경우 크기가 작은 순서대로 작성
 -- 최소 또는 그 이상이라는 뜻. 점차 커지는 의미
 - max 접두사를 사용할 경우 크기가 큰 순서대로 작성
 --최대 또는 그 이하라는 뜻. 점차 작아지는 것을 의미
 
 -----------------------------------------------------------------
 HTML5 시멘틱 구조 태그
- 시멘틱 (Semantic) : 의미의, 의미론적인
- 태그가 역할과 기능에 맞는 요소로 영역을 구분해 주는 역할
- 각 요소가 의미가 있다는 것
<header> : 헤더 (제목)
<nav> : 내비케이션 (메뉴)
<aside> : 사이드 바
<section> : 콘텐츠 (내용)
<article> : 컨텐츠 안의 내용
<footer> : 푸터 (주소/연락처/저작권 등/기업 정보)

-  HTML5 시멘틱 구조에 CSS 적용 영역 구분
 
 
 
 
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
