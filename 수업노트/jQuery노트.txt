
jQuery 
- 2006년에 존 레식(John Rsig)이 디자인한 자바스크립트 라이브러리
- 자바스크립트를 이용해 만든 다양한 함수들의 집합
- 무료 사용 가능한 오픈 소스 라이브러리
- 모든 웹 브라우저에서 동작

jQuery 특징
- 용량이 100KB 보다 작아서 가벼움
- 동적으로 HTML이나 CSS 컨트롤 능력 탁원ㄹ
- 짧고 간결하게 코딩 가능
- 크로스-브라우저 지원 (웹 표준과 타 브라우저 호환성 뛰어남)
- 편리한 Ajax 호출 방법
- 메소드 체인 방식으로 효율적인 코딩 가능. 간결하고 효과적인 코드 수정 가능
-- 메소드 체인 방식 : 여러 메소드를 연속으로 연결하여 사용하는 방식
----a.css().css().....
- 다양한 플러그인 제공

jQuery 목적
- 쉬운 DOM 처리
- 쉽고 일관된 이벤트 연결 구현
- 쉬운 시각적 효과 구현
- Ajax 기능 쉽게 구현

jQuery 기능
- DOM 처리
- 이벤트 처리
- 시각 효과 구현
- Ajax 기능 구현

jQuery 개발 환경
(1) jQuery 파일 다운로드해서 사용하는 방식
(2) CDN 호스트 이용하는 방식


(1) jQuery 파일 다운로드해서 사용하는 방식
- 웹 애플리케이션에 서버에 HTML, CSS, JavaScript 파일과 같이 jQuery 파일이 있어야 함
- 웹 애플리케이션에 접근하는 이용자마다 jQuery 파일이 다운로드 됨
- 트래픽이 증가할 수 있음


(2) CDN 호스트 이용하는 방식
 - CDN(Content Deliver Network)
 - 사용자 요청한 컨텐츠를 '사용자와 가장 가까운 곳에 위치한 캐시 서버에서 전달해주는 방식'
 - jQuery 파일 다운로드 없이 CDN에 있는 파일 링크만 연결해서 사용
 - 구글이나 마이크로소프트 등과 같인 기업이 jQuery 파일 제공
 - 네트워크 분산으로 병목 현상 피할 수 있고
 - jQuery 다운로드 받는 트랙픽 감소 효과
 - 그러나 라이브러리 제공 서버나 인터넷에 문제가 있을 경우 제공 받을 수 없음

- jQury 파일 다운로드
https://jquery.com/
jquery-3.6.0.min.js 파일 다운로드

jQuery 구조
- jQuery의 모든 함수 및 객체는 jQuery에서 제공되는 것이라는 점을 나타내기 위해
(1) 코드 앞에 jQuery 키워드 사용

jQuery(document).ready(function(){
	.......
});

(2) jQuery 치환
- 쉽게하기 위해 $문자로 치환해서 사용

$(document).ready(function(){
	....................
});

(3) 단축 형태
$(function(){
	....................
});

$(document).ready(함수)  명령어
- 화면에 페이지가 로됭된 후 실행
- HTML 문서가 화면에 보여진 후에 자동으로 포함된 함수 실행
- 자바스크립트의 window.onload = function() {  } 동일한 의미
- 함수가 호출되는 시점에서 DOM 요소에 접근 가능하는 것은 동일

$(document).ready(함수) 와 window.onload 차이점
$(document).ready(함수) 
- DOM 요소가 로드 되었을 때 이벤트 발생하면서 호출
- 외부 리소스, 이미지 또는 음악 등이 로드 되기 전

window.onload
- DOM 요소뿐 아니라 외부 리소스, 이미지, 음악 등 
- 모든 컨텐츠의 로드가 끝나는 시점에서 이벤트가 발생하면서 함수 호출

-----------------------------------------------------------
jQury 코드 형태
- 객체 구조로 객체.메소드() 형태
- 객체 선택 : $("선택자").메소드();
			   $("p").css();
- 변수에 저장 (객체 생성)
var obj = $("선택").메소드();
obj.메소드();

메소드 체인 : 여러 개의 메소드를 연결해서 사용하는 것
-객체.메소드().메소드(). ...

선택자에서 큰 따옴표 / 작은 따옴표 사용 가능
$("선택자").메소드(매개변수, 함수 등)
$('선택자').메소드()

선택자 종류
직접 선택자
- 태그 선택, 아이디 선택자, 클래스 선택, ..
인접 관계 선택자
 - 상위 요소 (조상/부모) 선택자
 - 하위 요소 (자식/자손) 선택
 - 형제 선택자
 필터 선택자
 속성 선택자
 
태그 선택 : $("태그명") : $("h1")
아이디 선택자 : $("#id명") : $("#box")
 클래스 선택 : $(".id명") : $(".red")

jQuery 변수
var $변수명 = $('선택자');
- 여러 개를 찾은 경우 변수는 배열로 생성
var $tds = $('td');
-- var tds = document.getElementsByTagName('td'); 와 동일

여러 개 선택해서 각각에 대해 마우스 올렸을 때와 마우스 뗐을 때 처리
- each()  :  each() 메소드에는 기본적으로 index 변수가 주어지는데 각 div 인덱스 번호(0부터 시작)에 해당
- hover() 
-- 선택한 요소에 마우스 포인터를 올렸을 때, 마우스 포인터가 요소를 벗어났을 때 효과 적용하는 메소드
선택자.hover(
	function(){
		//마우스를 올렸을 때 수행되는 함수
	},
	function() {
		// 마우스를 뗐을 때 수행되는 함수
	}
);

--------------------------------------------------------------------
jQuery 이벤트 
- 기존의 자바스크립트에서 사용했던 이벤트 대부분 사용 가능
- jQuery를 이용해서 이벤트를 처리하면 훨씬 간다하고 쉽게 이벤트 처리 가능

이벤트 사용 구조
(1) 이벤트 대상 : $('선택자')
(2) 이벤트 등록 메소드 (이벤트 유형) : click()
(3) 이벤트 핸들러 (이벤트 처리 함수 : function() {  })

이벤트 등록 메소드 유형 (이벤트 적용 방법) 
(1) 단독 이벤트 등록 메소드
- 한 동자가에 대한 이벤트를 등록할 때 사용하는 메소드
- 선택자에게 직접 이벤트 메소드를 적용
- 주의!! 동적 연결 지원 안 됨
$('#btn').click(function() {

});

(2) 그룹 이벤트 등록 메소드 (여러 이벤트 적용)
- 한 번에 여러 개의 이벤트 등록 가능
- 선택자에 on() 메소들 이용하여 이벤트 종류를 바인딩 시키는 방법
- 동적으로 생성된 요소에 적용 가능
- $('선택자').on('이벤트 유형1 2 3...', 실행함수)
$('#btn').on('mouseover focus, function(){

});

--우리는 2번 방법 사용

이벤트 연결 방식
- 정적 연결 : 현재 HTML 화면에 있는 태그에만 이벤트 연결
	- jQuery를 통해 동적으로 새로 삽입되는 태그에는 이벤트 연결 안 됨

- 동적 연결 : 현재 HTML 화면에 표시된 요소와 앞으로 동적으로 생성될 요소에 전부 이벤트 연결 가능

이벤트 종류
- 윈도우 이벤트
- 입력 양식 이벤트
- 마우스 이벤트
- 키보드 이벤트


- 윈도우 이벤트
-- ready : 문서 객체 요소(DOM 요소)가 모두 로드되었을 때 발생
-- resize() : 윈도우 창 크기 변경 시 발생
-- scroll
-- load : 문서 객체 요소가 모두 로드 되었을 때 발생 
	-- ready와 차이점은 리소드, 이미지, 음악 등 로드가 완료된 상태
	-- ready와 load의 발생 순서
	-- $(document).ready()가 먼저
	-- $(window).load()가 뒤에 발생
	-- 이벤트 시점에 따라 오작동 발생 가능성이 있기 때문에 가능한 같이 사용하지 않고 분리해서 사용
-- unload : 문석 객체 닫을 때 발생


2개의 이벤트 처리 방법
(1) 선택자
   		.on(이벤트1)
   		.on(이벤트2)

(2) 선택자.on(이벤트1, 이벤트2)


동적 연결 이벤트 : 동적으로 생성된 버튼에 이벤트 연결
동적 연결 이벤트 적용 방법
$(document).on("이벤트", "이벤트 발생 객체(새로 생성된 객체)", 실행함수);


교재 연습문제
P407 
- 09번 : hover() 사용
-10번

---------------------------------------------------------------------------------------------------
키보드 이벤트
- keyup
- keydown
- keypress


입력 양식 이벤트
- submit
- reset
- change
- focus
- blur : 커서를 잃었을 때

- <input> 입력란에서 엔터키를 치면
-- 무조건 submit 이벤트가 발생하면서 서버로 전송되는 문제가 발생
-- [왼료] 버튼 누른 것과 동일
- 엔터키 쳐소 submit 되지 않도록 문서 전체에 이벤트 처리
- [Enter] 키의 아스키 코드 값 : 13
- 이벤트 발생 시 키 코드값을 알아와서 (e.keyCode) 13인지 확인
- 13이라면 넘어가지 않고 return false; 로 처리






















