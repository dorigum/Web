
웹 개요

웹 서비스 : 인터넷을 기반으로 제공되는 서비스

웹 애플리케이션
- 웹을 기반으로 작동되는 프로그램
- 웹 프로그래밍을 통해 구현

웹 프로그래밍
- 정적인 페이지인 HTML만으로 데이터가 실시간으로 변화하는 것을 처리하거나 저장할 수 없음
- 동적으로 변화하는 데이터를 처리하고 표시하기 위해서 개발된 언어들 CGI, ASP, PHP, JSP, Servlet,... 사용
- 웹 프로그래밍 기본적로 클라이언트/서버 방식 (client/server)

CGI (Common Gateway Interface)
- 공통 게이트웨이 인터페이스
- 웹 서버와 외부 프로그램 사이에서 정보를 주고받는 방법 또는 규약

CGI Scripts
- 웹 서버 상에서 동작하는 프로그램 통칭
- 웹 서버에 의해 제공되는 어떠한 프로그래밍 또는 스트립팅 언로도 작성될 수 있음 (C/C++/JAVA 등)

CGI Scripts 장점
- 서버에 있는 프로그램 코드 수행 가능
- 웹 서버의 기능 확장
- 웹 서버에 의해 제공되는 어떠한 프로그래밍 또는 스트립팅 언로도 작성될 수 있음

CGI Scripts 단점
- 클라이언트 요청이 있을 때마다 웹 서버가 프로세스 생성
- 동시 사용자가 많을 때 각 요처에 따른 작업 작업량이 많아지고 서버에 부하가 걸림
- 이런 문제점을 해결하기 위해 Java 기반으로 만들어진 CGI가 Servlet (요청 시 마다 스레드 생성)

웹 서비스 구성 요소
- 웹 브라우저 : 클라이언트, 사용자의 작업 창
- 웹 서버 : 웹 브라우저의 요청을 받아들이고 결과를 반환 (응답)
- 웹 애플리케이션 서버(WAS) : 요청된 페이지의 로직 및 데이터베이스와의 연동을 처리하는 부분
			Apache Tomat
- 데이터베이스 : 데이터의 저장소

웹 서비스 처리 순서
- 요청 처리 과정 : 웹 클라이언트 (웹 브라우저)  -> 웹 서버 ->  웹 애플리케이션 서버 (WAS:Tomcat) -> 데이터베이스
- 응답 처리 과정 :                                   <-           <-                                                <-                            


웹 서버
- 웹에서 서버 기능을 수행하는 프로그램 (소프트웨어 (하드웨어))
- HTTP 프로토콜 기반
- 웹 클라이언트(웹 브라우저)로부터 요청을 받아서 서비스하는 기능 담당
- 정적인 컨텐츠(HTML, CSS,..) 직접 처리
- 동적인 컨테츠는 웹 컨테이너에게 보내고, 웹 컨테이너가 처리한 결과를 클라이언트에게 응답

웹 서버 종류
- Apache 
- IIS (Internet Information Server) : MS

웹 컨테이너 (Web Container)
- 웹 애플리케이션을 실행할 수 있는 컨테이너
- JSP와 Servlet을 실행시킬 수 있느 소프트웨어
- 서블릿 컨테이너하고도 함
-- 웹 서버가 서블릿 자체를 실행하지 못하므로 JVM을 내장한 컨테이너라는 서블릿 실행 환경이 필요
-- 클라이언트에서 서블릿 요청이 들어오변 서버에서 서블릿 컨테이너를 만들고 스레드 생성
- 서블릿과 JSP에 대한 실행 환경 제공
- static page에 대한 요청도 처리 가능
- 웹 서버에서 JSP 요청이 들어오면 톰캣(웹서버+컨테이너)에서 JSp 파일을 서블릿으로 변화해서 컴파일 수행
- 서블릿 수행 결과를 웹 서버에게 전달하면 웹 서버가 클라이언트에게 전달 (응답)
- 서블릿의 생명주기 관리
- 웹 애플리케이션 당 한 개의 ServletContext 객체 생성

웹 컨테이너가 사용자의 요청에 응답하는 순서
(1) 클라이언트가 HTTP request를 HTTP service(웹 서버에서 서비스 제공)에게 전송
(2) HTTP service(웹 서버)는 요청 데이터를 웹 컨테이너에게 전송
(3) 웹 컨테이너는 HttpServletRequest객체와 HttpServletResponse 객체를 생성
(4) 웹 컨테이너는 요청된 Servlet service() 메소드를 호출해서 Servlet 활성화 시킴
(5) 웹 컨테이너는 Servlet에 의해 성성된 응답 데이터를 HTTP service에게 전송
(6) HTTP service는 HTTP response를 클라이언트에게 전송

웹 애플리케이션 서버(WAS)
- Web Application Server :WAS
- 웹 서버로부터 오는 동적인 요청을 처리하는 서버
- 웹 서버 기능 + 웹 컨테이너 기능
- Apache Tomcat (WAS이고 컨테이너)
- 기타 기능 : 트랜잭션, 보안, 트래픽 관리, DB 커넥션 풀, 사용자 관리 등 다양한 기능 제공


JSP와 Servlet 
- JSP(Java Server Page) :	 HTML 내에 Java 언어를 삽입한 문서 (확장자: .jsp)
-- View 페이지로 사용
- Servlet (Server + Applet) : Java 언어로 이루어진 웹프로그래밍 문서. 자바에 위존적.(확장자:.java)
-- Controller 역할

클라이언트로부터 요청이 웹 컨테이너에서
- JSP 파일을 Java 파일로 변환해서 컴파일해서 .class 생성 -> 실행

-------------------------------------------------------------------------------------------------------
서블릿
- 서버 쪽에서 실행되면서 클라이언트의 요청에 따라 동적으로 서비스를 제공하는 자바 클래스
- 자바의 일반적인 특징 모두 포함
- 독자적으로 실행되지 못하고 톰캣(JSP/Servlet 컨테이너)에서 실행

- 자바 플랫폼에서 컴포넌트 기반의 웹 애플리케이션을 개발하는 핵심 기술 (동적 웹 애플리케이션 컴포넌트)
- 클라이언트 요청에 동적으로 작동
- 멀티 스레드 기반
-- 같은 Servlet class에 대한 요청을 처리하는 모든 thread는 같은 Servlet 객체를 공유
----동시성 문제가 발생
--- 동시성 문제를 해결하기 위해 로컬 변수를 사용
--- 로컬 변수는 각 요청 스레드마다 각각의 스택 영역에 저장되기 때문에 동시성 문제를 발생시키지 않음
- JSP 페이지처럼 화면에 내용을 표시할 목적으로 사용하는 것잉 아닐
- MVC 패턴에서 로직인 모델(DAO/DTO)과 화면에 결과를 표시하는 View 사이에서 제어를 하는 컨트롤러로 사용됨
- Java 파일이기 때문에 Java Resources / src 위치에 저장

서블릿의 라이프 사이클 (생명추기)
(1) Servlet 객체 생성 (처음 한 번)
(2) 초기화 : init() 메소드 호출 (처음 한 번)
(3) 요청 작업 처리 : service() 메소드가 호출되고
	-- 이후 request에 따라 doGet()/doPost()/doPut()/doHead()/doDelete()/doTrace()/doPptions()
	-- 요청 시 마다 매번 수행 (재호출되는 메소드)
(4) 자원 해제 : destroy() 메소드 호출 (마지막 한 번)
    -- Servlet	수정 / 서버 재가동 등 ...
	
Servlet을 많이 사용하는 이유 : 빠른 응답 속도 때문
- 서블릿은 최초 요엉 시 객체가 만들어져 메모리에 로드되고
- 이후 요청 시에는 기존의 객체를 재활용
- 따라서 동작 속도가 빠름

서블릿의 장점
- 신뢰성 (Reliability)
- 확장성 (Scalability) - 기능 확장 용이
- 플랫폼과 서버에 독립적 (자바 기반)
-- 한 번 개발된 애플리케이션은 다양한 서버 환경에서 실행 가능
- Java에서 제공되는 다를 기술을 같이 사용 가능 (예: Sevlet + JDBC 연동)

서블릿 클래스
- 서블릿 패키지
--javax.servlet.* : 서블릿 작성을 위한 인터페이스와 클래스 제공
--javax.servlet.http.* : HTTP 프로토콜을 이용한 서블릿 작성에 필요한 인터페이스 제공 (GET/POST)

- 서블릿 클래스
-- Servlet 인터페이스
-- GenericServlet 추상 클래스
-- HTTPServlet 클래스
-- 서블릿을 만들 때 HTTPServlet 클래스를 상속받아서 만듦

----------------------------------------------------------------------------------------------------------
서블릿 매핑 방법에 따라 
(1) xml 기반
(2) 어노테이션 기반

웹 브라우저에서 서블릿을 요청하기 위해서는 서블릿 매핑 필요
- http://ip:포트/프로젝트이름/패키지 이름이 포함된 클래스 이름
- 설정이 필요한데 (1) xml 기반으로 하려면 web.xml 파일에 설정

첫 번째 서블릿
- 클래스 생성 : HTTPServlet 클래스를 상속받음
 










